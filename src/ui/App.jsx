import React, { useEffect, useMemo, useRef, useState } from "react";
import { motion, AnimatePresence, useInView, useMotionValue, useTransform } from "framer-motion";
import data from "../content.json";
const APP_KEY = "finpath:runner:v1.9";
const TRACKS = data.tracks;
function load(){ try{ return JSON.parse(localStorage.getItem(APP_KEY))||null; }catch{ return null; } }
function save(s){ try{ localStorage.setItem(APP_KEY, JSON.stringify(s)); }catch{} }
function clsx(...c){ return c.filter(Boolean).join(" "); }
function vibrate(ms=10){ try{ if(navigator.vibrate) navigator.vibrate(ms); }catch{} }
function recommendTrack(score){ if(score<=3) return "foundations"; if(score<=7) return "investing-basics"; return "advanced"; }
function Card({children,className,style}){ return <div className={clsx("card", className)} style={style}>{children}</div>; }
function Button({children,onClick,variant="primary",className,disabled}){ const base="btn text-sm"; const styles={ primary:"btn-primary", outline:"btn-outline", ghost:"btn-ghost" }[variant]; return <button disabled={disabled} onClick={(e)=>{ vibrate(6); onClick && onClick(e); }} className={clsx(base, styles, className)}>{children}</button>; }
function ProgressBar({value,flash}){ const val = Math.min(100,Math.max(0,value||0)); const flashClass = ([25,50,75,100].includes(Math.round(val)) && flash) ? "pulse" : ""; return <div className={clsx("w-full h-2 rounded-full bg-black/10", flashClass)}><div className="h-2 rounded-full bg-black" style={{width:`${val}%`}}/></div>; }
function ProgressRing({ value=0, size=96, stroke=10 }){ const r = (size - stroke) / 2; const c = 2 * Math.PI * r; const pct = Math.min(100, Math.max(0, value)); const dash = (pct/100)*c; return (<svg width={size} height={size}><circle cx={size/2} cy={size/2} r={r} stroke="#E5E7EB" strokeWidth={stroke} fill="none" /><circle cx={size/2} cy={size/2} r={r} stroke="#000" strokeWidth={stroke} fill="none" strokeDasharray={`${dash} ${c-dash}`} strokeLinecap="round" transform={`rotate(-90 ${size/2} ${size/2})`} /><text x="50%" y="50%" dominantBaseline="middle" textAnchor="middle" style={{fontWeight:800, fontSize:14}}>{Math.round(pct)}%</text></svg> ); }
function Header({onNav}){ const [open,setOpen]=useState(false); const nav=[{k:"home",label:"Home"},{k:"tracks",label:"Tracks"},{k:"account",label:"Account"}]; return <div className="sticky top-0 z-40 backdrop-blur bg-white/80"><div className="max-w-6xl mx-auto px-5 py-4 flex items-center justify-between"><div className="flex items-center gap-3"><div className="w-8 h-8 rounded-lg bg-black"/><span className="font-black tracking-tight text-lg">FinPath</span></div><div className="hidden md:flex items-center gap-2">{nav.map(n=>(<Button key={n.k} variant="ghost" onClick={()=>onNav(n.k)}>{n.label}</Button>))}</div><button className="md:hidden p-2 rounded-lg" onClick={()=>setOpen(true)} aria-label="Open menu"><svg width="22" height="22" viewBox="0 0 24 24" fill="currentColor"><rect x="3" y="6" width="18" height="2" rx="1"/><rect x="3" y="11" width="18" height="2" rx="1"/><rect x="3" y="16" width="18" height="2" rx="1"/></svg></button></div><AnimatePresence>{open && (<motion.div initial={{opacity:0}} animate={{opacity:1}} exit={{opacity:0}} className="md:hidden fixed inset-0 z-50 bg-black/40" onClick={()=>setOpen(false)}><motion.div initial={{y:-12,opacity:0}} animate={{y:0,opacity:1}} exit={{y:-12,opacity:0}} className="bg-white rounded-b-2xl p-3 pb-5" onClick={(e)=>e.stopPropagation()}>{nav.map(n=>(<button key={n.k} onClick={()=>{onNav(n.k); setOpen(false);}} className="w-full text-left px-3 py-3 rounded-xl hover:bg-black/5">{n.label}</button>))}</motion.div></motion.div>)}</AnimatePresence></div>; }
function FirstRun({onDone}){ return <motion.div initial={{opacity:1}} animate={{opacity:0}} transition={{delay:1.1, duration:.5}} onAnimationComplete={onDone} className="fixed inset-0 z-50 grid place-items-center bg-paper"><motion.div initial={{y:20, opacity:0}} animate={{y:0, opacity:1}} transition={{duration:.6, ease:"easeOut"}} className="text-center"><div className="inline-flex items-center gap-3 px-5 py-3 rounded-xl" style={{background:"#D8FF3F"}}><div className="w-6 h-6 rounded bg-black" /><span className="font-black tracking-tight">FinPath</span></div><div className="mt-4 text-sm text-muted">Loading your path‚Ä¶</div></motion.div></motion.div>; }
function Confetti({show,onDone}){ if(!show) return null; const pieces = Array.from({length:24}); return <div style={{position:"fixed", inset:0, pointerEvents:"none"}}><AnimatePresence>{pieces.map((_,i)=>(<motion.div key={i} initial={{opacity:0, y:-20, x: (i*40)%window.innerWidth}} animate={{opacity:1, y:window.innerHeight+60, x: ((i*40)%window.innerWidth)+((i%2?1:-1)*60)}} transition={{duration:1.2 + (i%5)*0.1, ease:"easeOut"}} onAnimationComplete={i===pieces.length-1?onDone:undefined} style={{position:"absolute"}}>üéâ</motion.div>))}</AnimatePresence></div>; }
function SwipeCard({ text, onSwipeLeft, onSwipeRight }){ const x = useMotionValue(0); const rotate = useTransform(x, [-160, 0, 160], [-10, 0, 10]); const threshold = 120; const power = 800; const fling = (dir)=>{ const target = (dir>0 ? window.innerWidth : -window.innerWidth) + 240; x.stop(); x.set(target); dir>0?onSwipeRight():onSwipeLeft(); setTimeout(()=>x.set(0),0); }; return <div className="relative"><motion.div style={{ x, rotate }} className="card p-6 sm:p-8" drag="x" dragConstraints={{left:0,right:0}} dragElastic={0.2} onDragEnd={(e, info)=>{ const X=info.offset.x, V=info.velocity.x; if(X>threshold||V>power){ fling(1); } else if(X<-threshold||V<-power){ fling(-1);} else { x.set(0);} }}><div className="min-h-[120px] sm:min-h-[140px] flex items-center"><h2 className="text-xl sm:text-2xl font-black tracking-tight">{text}</h2></div><div className="mt-3 text-xs text-muted">Swipe ‚Üí for Yes, ‚Üê for No</div></motion.div></div>; }
function Questionnaire({ questions, onFinish }){ const [i,setI]=useState(0); const [answers,setAnswers]=useState([]); const q=questions[i]; const done=i>=questions.length; useEffect(()=>{ const s=load(); if(s?.quiz){ setI(questions.length); setAnswers(s.quiz.answers||[]);} },[]); useEffect(()=>{ const current=load()||{}; const score=answers.filter(Boolean).length; save({...current, quiz:{answers,score}}); },[answers]); const record=(val)=>{ const next=[...answers]; next[i]=val; setAnswers(next); setI(i+1); }; if(done) return <div className="max-w-sm mx-auto px-5 py-14"><Card className="p-8 text-center"><div className="chip inline-block mb-3 neon">Nice run</div><h2 className="text-2xl font-black mb-2">We‚Äôve got your starting line</h2><p className="text-muted mb-4">We‚Äôll pick a track that fits your answers. You can switch when you finish it.</p><Button onClick={()=>onFinish(answers.filter(Boolean).length)}>See recommendation</Button></Card></div>; return <div className="max-w-sm mx-auto px-5 py-12 select-none"><div className="flex items-center justify-between mb-4"><div className="chip">Question {i+1}/{questions.length}</div><div className="w-40"><ProgressBar value={(i/questions.length)*100} flash /></div></div><SwipeCard key={q.text} text={q.text} onSwipeLeft={()=>record(false)} onSwipeRight={()=>record(true)} /><div className="mt-6 grid grid-cols-2 gap-3"><Button onClick={()=>record(true)}>Yes</Button><Button variant="outline" onClick={()=>record(false)}>No</Button></div></div>; }
function HomeProgress(){ const s=load()||{}; const r=s.runner||{}; let total=0, done=0, tid=null; Object.keys(r).forEach(k=>{ const track=TRACKS.find(t=>t.id===k); if(!track) return; const count=track.chapters.reduce((a,c)=>a+c.lessons.length,0); total+=count; done+=Math.min(count,(r[k].index||0)); tid=k; }); if(done<=0) return null; const pct = total? (done/total)*100 : 0; const resumeTid = tid; return <Card className="p-6 flex items-center justify-between"><div><div className="chip mb-1">Your progress</div><div className="font-bold">Keep going ‚Äî you‚Äôre making strides</div><div className="text-sm text-muted">Progress across started tracks</div><div className="mt-3"><Button onClick={()=>{ const state=load()||{}; state.goto={route:"runner", tid:resumeTid}; save(state); location.reload(); }}>Resume track</Button></div></div><ProgressRing value={pct} /></Card>; }
function Home({ onPrimary, onSecondary, isNewUser, recommendedTrack }){ return <div className="max-w-6xl mx-auto px-5 py-10 space-y-6"><HomeProgress /><div className="grid md:grid-cols-2 gap-6 items-stretch"><Card className="p-7 md:p-10">{isNewUser ? <div className="chip inline-block mb-3 neon">Welcome</div> : <div className="chip inline-block mb-3 neon">{recommendedTrack? "Recommended" : "Welcome back"}</div>}<h1 className="text-4xl md:text-5xl font-black tracking-tight mb-3">{isNewUser ? "Let‚Äôs start your path" : "Your money, made clear."}</h1>{recommendedTrack ? <p className="text-muted max-w-md">We suggest starting with <span className="font-bold">{recommendedTrack.name}</span>. You‚Äôll unlock other tracks after you complete it.</p> : <p className="text-muted max-w-md">Continue where you left off, or start a track tailored to your goals.</p>}<div className="mt-6 flex gap-3"><Button onClick={onPrimary}>{isNewUser ? "Start recommended track" : (recommendedTrack ? "Start recommended track" : "Continue learning")}</Button><Button variant="outline" onClick={onSecondary}>{isNewUser ? "Browse all tracks" : "Browse tracks"}</Button></div></Card><Card className="p-7 md:p-10"><h3 className="font-bold mb-2">What you‚Äôll get</h3><ul className="text-sm text-muted list-disc pl-5 space-y-1"><li>Short lessons (3‚Äì5 min) with quick checks</li><li>Clear progress and weekly goals</li><li>Education-only, Canada-focused guidance</li></ul></Card></div></div>; }
function Tracks({ tracks, onEnterTrack, allowed }){ return <div className="max-w-6xl mx-auto px-5 py-10 grid md:grid-cols-3 gap-6">{tracks.map(t=>{ const locked = allowed!=="all" && t.id!==allowed; const s=load()||{}; const idx=s?.runner?.[t.id]?.index||0; const count=t.chapters.reduce((a,c)=>a+c.lessons.length,0); return (<Card key={t.id} className={locked?"p-6 locked":"p-6"}><div className="flex items-center justify-between mb-2"><h3 className="font-bold text-lg">{t.name}</h3><span className="chip">{locked? "Locked" : "Track"}</span></div><p className="text-muted text-sm mb-2">{t.chapters.length} chapters ‚Ä¢ {count} lessons</p><div className="flex items-center justify-between mb-4"><div className="text-sm">{Math.min(idx,count)} of {count} complete</div><div className="w-28"><ProgressBar value={(Math.min(idx,count)/count)*100} /></div></div><div className="mt-2"><Button onClick={()=>!locked && onEnterTrack(t.id)} disabled={locked}>{locked? "Locked" : "Start track"}</Button></div></Card>); })}</div>; }
function RunnerHeader({ title, step, total, onQuit }){ const pct = Math.round((step/Math.max(1,total))*100); return <div className="sticky top-0 z-30 backdrop-blur bg-white/85"><div className="max-w-4xl mx-auto px-5 py-3"><div className="flex items-center justify-between"><div className="font-bold truncate">{title}</div><button onClick={onQuit} className="chip">Quit</button></div><div className="mt-2"><ProgressBar value={pct} flash /></div><div className="mt-1 text-xs text-muted">{step} / {total}</div></div></div>; }
function isYN(labels){ if(!Array.isArray(labels)||labels.length!==2) return false; const a=labels.map(l=>(l||"").toLowerCase()); const set=new Set(a); return (set.has("yes")&&set.has("no"))||(set.has("true")&&set.has("false")); }
function LessonBody({sections,takeaways,learnMore}){ const Section = ({children}) => { const ref = React.useRef(null); const [shown,setShown]=useState(false); useEffect(()=>{ const o=new IntersectionObserver(([e])=>{ if(e.isIntersecting){ setShown(true); o.disconnect(); } }, {threshold:.2}); if(ref.current) o.observe(ref.current); return ()=>o.disconnect(); },[]); return <motion.div ref={ref} initial={{opacity:0, y:8}} animate={shown? {opacity:1, y:0}:{}} transition={{duration:.35, ease:"easeOut"}} className="mb-4">{children}</motion.div>; }; return <div className="prose max-w-prose">{sections?.map((s,idx)=>{ if(s.type==="hook") return <Section key={idx}><div className="text-2xl font-black">{s.text}</div></Section>; if(s.type==="what") return <Section key={idx}><div className="text-lg">{s.text}</div></Section>; if(s.type==="h5") return <Section key={idx}><div><div className="font-bold">{s.label}</div><p>{s.text}</p></div></Section>; return <Section key={idx}><p>{s.text}</p></Section>; })}{Array.isArray(takeaways)&&takeaways.length>0 && (<div className="mt-4 p-4 bg-surface rounded-xl"><div className="font-bold mb-1">Key takeaways</div><ul className="list-disc pl-5 text-sm">{takeaways.map((t,i)=>(<li key={i}>{t}</li>))}</ul></div>)}{Array.isArray(learnMore)&&learnMore.length>0 && (<div className="mt-4 flex flex-wrap gap-3">{learnMore.map((l,i)=>(<a key={i} href={l.href} target="_blank" rel="noreferrer" className="link text-sm">{l.label}</a>))}</div>)}</div>; }
function LessonInline({ lesson, onFinish, isLast }){ const [answers,setAnswers]=useState({}); const [complete,setComplete]=useState(false); const [show,setShow]=useState(false); const [confetti,setConfetti]=useState(false); const [optionMaps,setOptionMaps]=useState([]); useEffect(()=>{ setAnswers({}); setComplete(false); setShow(false); window.scrollTo({ top:0, behavior:"auto" }); setConfetti(false); const maps = (lesson.quiz||[]).map(q=>{ const labels = Array.isArray(q.labels)? q.labels : ["Yes","No"]; if(isYN(labels)){ const left = (labels.includes("True")?"True":"Yes"); const right = (labels.includes("False")?"False":"No"); let correctIndex = 0; if(typeof q.correct === "number"){ correctIndex = q.correct; } else { const first = labels[0]; correctIndex = (first.toLowerCase()===left.toLowerCase())?0:1; } return { left, right, correctIndex }; }else{ const order = Math.random()<0.5? [0,1] : [1,0]; const left = labels[order[0]]; const right = labels[order[1]]; const correctIndex = (order[0]===0)?0:1; return { left, right, correctIndex }; } }); setOptionMaps(maps); },[lesson?.id]); const total = (lesson.quiz||[]).length; const allAnswered = (lesson.quiz||[]).every((_,i)=>answers[i]===0||answers[i]===1); const choose=(i,idx)=>{ vibrate(8); setAnswers(p=>({...p,[i]:idx})); }; const finish=()=>{ if(!complete && allAnswered){ setComplete(true); setShow(true); setConfetti(true);} else { setShow(true); } }; const correct = (lesson.quiz||[]).reduce((acc,q,i)=> acc + ((answers[i]??-1)=== (optionMaps[i]?.correctIndex ?? 0) ?1:0), 0); return <div className="max-w-4xl mx-auto px-5 py-8"><Card className="p-7"><div className="mb-1 text-xs uppercase tracking-wide text-muted">{lesson.title}</div><LessonBody sections={lesson.sections} takeaways={lesson.takeaways} learnMore={lesson.learnMore} /></Card><Card className="p-6 mt-6"><div className="flex items-center justify-between mb-3"><h3 className="font-bold">Quick Check</h3><span className="chip neon">+{lesson.xp||10} XP</span></div>{(lesson.quiz||[]).map((q,i)=>(<div key={i} className="mb-4"><p className="mb-2">{q.q || q}</p><div className="grid grid-cols-2 gap-2"><Button onClick={()=>choose(i,0)} variant={(answers[i]===0)?"primary":"outline"} aria-pressed={answers[i]===0}>{optionMaps[i]?.left || (isYN(q.labels)? (q.labels?.includes("True")?"True":"Yes") : q.labels?.[0] || "Yes")}</Button><Button onClick={()=>choose(i,1)} variant={(answers[i]===1)?"primary":"outline"} aria-pressed={answers[i]===1}>{optionMaps[i]?.right || (isYN(q.labels)? (q.labels?.includes("False")?"False":"No") : q.labels?.[1] || "No")}</Button></div>{answers[i]!==undefined && (<div className="mt-2 text-sm">{answers[i] === (optionMaps[i]?.correctIndex ?? 0)? <span className="text-emerald-600">Correct!</span> : <span className="text-rose-600">Try again</span>}</div>)}</div>))}<div className="mt-4"><Button onClick={finish} disabled={!allAnswered && !complete}>{isLast? (complete? "Finish Track" : "Finish Track") : (complete? "Continue to Next Lesson" : "Finish Lesson")}</Button></div></Card><AnimatePresence>{show && (<motion.div initial={{opacity:0}} animate={{opacity:1}} exit={{opacity:0}} className="fixed inset-0 z-50 bg-black/40 grid place-items-center"><Card className="p-6 max-w-md w-[92vw]"><div className="text-center space-y-2"><div className="text-5xl">üéâ</div><h3 className="text-xl font-bold">Nice work!</h3><p className="text-muted">{correct} / {total} correct. {Math.round((correct/Math.max(1,total))*100)}%</p><div className="flex gap-2 justify-center pt-2"><Button onClick={()=>{ setShow(false); onFinish(lesson.xp||10); }}>Continue</Button></div></div></Card></motion.div>)} </AnimatePresence><Confetti show={confetti} onDone={()=>setConfetti(false)} /></div>; }
function useGame(){ const [game,setGame]=useState(()=> (load()?.game) || { xp:0, streak:0, lastActive:null, badges:[], weekly:{ target:5, completed:0 }, lastActiveRef:null, allowedTrack:null, completedTracks:[], demoBadges:[ {id:"budget-builder", name:"Budget Builder", earned:true}, {id:"portfolio-pro", name:"Portfolio Pro", earned:false}, {id:"debt-demolisher", name:"Debt Demolisher", earned:false}, {id:"dividend-dynamo", name:"Dividend Dynamo", earned:false}, {id:"track-master", name:"Track Master", earned:false}, { id:"streak-champ", name:"Streak Champion", earned:false },
, {id:"wealth-wizard", name:"Wealth Wizard", earned:false}, {id:"consistency-champ", name:"Consistency Champ", earned:false} ] }); useEffect(()=>{ const today=new Date().toDateString(); const y=new Date(Date.now()-86400000).toDateString(); if(game.lastActive!==today){ const n=game.lastActive===y?(game.streak||0)+1:1; setGame(g=>({ ...g, lastActive:today, streak:n })); } },[]); useEffect(()=>{ const s=load()||{}; save({...s, game}); },[game]); const awardXp = (amt)=> setGame(g=>({ ...g, xp:(g.xp||0)+amt, badges: Array.from(new Set([...(g.badges||[]), "First Steps"])).filter(Boolean) })); const setLastActiveRef = (ref)=> setGame(g=>({ ...g, lastActiveRef: ref })); const setAllowedTrack = (tid)=> setGame(g=>({ ...g, allowedTrack: tid })); const markTrackComplete = (tid)=> setGame(g=>({ ...g, completedTracks: Array.from(new Set([...(g.completedTracks||[]), tid])), allowedTrack: "all" })); return { game, awardXp, setLastActiveRef, setAllowedTrack, markTrackComplete, setGame }; }
function BadgeGallery(){ const [g,setG]=useState(()=> (load()?.game?.demoBadges)||[]); useEffect(()=>{ const s=load()||{}; s.game=s.game||{}; s.game.demoBadges=g; save(s); },[g]); return <Card className="p-6"><div className="font-bold mb-2">Badges</div><div className="grid grid-cols-2 sm:grid-cols-4 gap-4">{g.map(b=>{ return <div key={b.id} className={clsx("rounded-xl p-3 text-center", !b.earned && "opacity-60")}><div className="text-3xl mb-1">{b.earned?"üèÖ":"üîí"}</div><div className="text-sm font-bold">{b.name}</div></div> })}</div></Card>; }
function Account({onRedoOnboarding}){ const [jsonText,setJsonText]=useState(""); const exportData = ()=>{ const s=load()||{}; const blob=new Blob([JSON.stringify(s,null,2)], {type:"application/json"}); const url=URL.createObjectURL(blob); const a=document.createElement("a"); a.href=url; a.download="finpath-progress.json"; a.click(); URL.revokeObjectURL(url); }; const importData = ()=>{ try{ const obj=JSON.parse(jsonText); save(obj); alert("Imported. Refresh the page."); }catch{ alert("Invalid JSON"); } }; const resetAll = ()=>{ if(confirm("Reset all local progress?")){ localStorage.removeItem(APP_KEY); location.reload(); } }; const redoQuiz = ()=>{ const s=load()||{}; save({...s, quiz:null}); onRedoOnboarding && onRedoOnboarding(); }; return <div className="max-w-3xl mx-auto px-5 py-12 space-y-6"><Card className="p-6"><h3 className="font-bold mb-2">Onboarding</h3><div className="flex gap-2 flex-wrap"><Button onClick={redoQuiz}>Redo questionnaire</Button><Button variant="outline" onClick={()=>{ const s=load()||{}; const g = {...(s.game||{}), allowedTrack:"all"}; save({...s, game:g}); alert("All tracks unlocked for this device."); }}>Unlock all tracks (demo)</Button></div></Card><BadgeGallery /><Card className="p-6"><h3 className="font-bold mb-2">Data</h3><div className="flex gap-2 flex-wrap mb-3"><Button onClick={exportData}>Export progress</Button><Button variant="outline" onClick={resetAll}>Reset all</Button></div><label className="text-xs text-muted block mb-1">Import JSON</label><textarea className="input" rows="6" value={jsonText} onChange={e=>setJsonText(e.target.value)} placeholder='Paste JSON exported from this app'></textarea><div className="mt-2"><Button onClick={importData}>Import</Button></div></Card><div className="text-xs text-muted">Coming soon: email link, org cohorts, device sync.</div></div>; }
function TrackRunner({ track, onDone, onQuit, updateResume, awardXp, markComplete }){ const lessons = track.chapters.flatMap(c=> c.lessons.map(l=> ({...l, _cid:c.id, _cTitle:c.title}))).slice(0,25); const [idx,setIdx]=useState(()=>{ const s = load(); const ref = s?.runner?.[track.id]?.index ?? 0; return Math.min(Math.max(0, ref), lessons.length-1); }); useEffect(()=>{ const s=load()||{}; save({...s, runner:{ ...(s.runner||{}), [track.id]:{ index: idx } }}); },[idx, track.id]); useEffect(()=>{ updateResume && updateResume({ tid: track.id, cid: lessons[idx]._cid, lid: lessons[idx].id }); },[idx, track.id]); useEffect(()=>{ window.scrollTo({ top: 0, behavior: "auto" }); },[idx]); const current = lessons[idx]; const total = lessons.length; const done = idx >= total; if(done) return <div className="max-w-3xl mx-auto px-5 py-16"><Card className="p-8 text-center"><div className="text-6xl mb-2">üèÅ</div><h3 className="text-xl font-bold">Track complete</h3><p className="text-muted mb-4">Great run through {track.name}. All tracks are now unlocked.</p><Button onClick={()=>{ markComplete && markComplete(track.id); onDone(); }}>Back to Tracks</Button></Card></div>; return <div><RunnerHeader title={`${track.name} ‚Ä¢ ${current._cTitle}`} step={idx+1} total={total} onQuit={onQuit} /><LessonInline key={current.id} lesson={current} onFinish={(earnedXp)=>{ awardXp(earnedXp); if(idx+1<total){ setIdx(idx+1); } else { markComplete && markComplete(track.id); onDone(); } }} isLast={idx+1>=total} /></div>; }
export default function App(){ const [route,setRoute]=useState("home"); const [activeTrackId,setActiveTrackId]=useState(null); const [showIntro,setShowIntro]=useState(()=> !(load()?.introDone) ); const [recommendedId,setRecommendedId]=useState(()=>{ const s=load(); const sc=s?.quiz?.score; return typeof sc==="number"? recommendTrack(sc): null; }); const getTrack = (id)=> TRACKS.find(t=>t.id===id); const lastRef = load()?.game?.lastActiveRef; useEffect(()=>{ const s=load()||{}; if(!s?.quiz){ setRoute("quiz"); } else { if(!s?.game?.allowedTrack){ const allowed = s?.recommendedId || recommendTrack(s?.quiz?.score||0); save({ ...s, game: { ...(s.game||{}), allowedTrack: allowed } }); } if(s?.goto){ if(s.goto.route==="runner" && s.goto.tid){ setActiveTrackId(s.goto.tid); setRoute("runner"); s.goto=null; save(s);} } } },[]); useEffect(()=>{ if(!showIntro){ const s=load()||{}; s.introDone=true; save(s); } },[showIntro]); const handleQuizFinish = (score)=>{ const id=recommendTrack(score); const s=load()||{}; save({...s, quiz:{ ...(s.quiz||{}), score }, recommendedId: id, game: { ...(s.game||{}), allowedTrack: id }}); setRoute("home"); }; const isNewUser = !lastRef; const allowed = (load()?.game?.allowedTrack) || recommendedId; return <div className="min-h-screen">{showIntro && <FirstRun onDone={()=>setShowIntro(false)} />}<Header onNav={(r)=>setRoute(r)} />{route==="quiz" && <Questionnaire questions={[ { text: "Quick gut check: do you keep a monthly budget?" }, { text: "Emergency pad set aside‚Äîyes or not yet?" }, { text: "Have you ever contributed to a TFSA?" }, { text: "TFSA vs RRSP‚Äîdo you know the key differences?" }, { text: "Have you bought stocks, ETFs, or mutual funds before?" }, { text: "Diversification‚Äîdoes the concept make sense to you?" }, { text: "Have you filed your own taxes at least once?" }, { text: "Credit scores: do you know the basics?" }, { text: "Have you ever compared MERs/fees between funds?" }, { text: "Do you know what an index fund is?" } ]} onFinish={handleQuizFinish} />}{route==="home" && <Home isNewUser={isNewUser} recommendedTrack={allowed ? getTrack(allowed) : null} onPrimary={()=>{ const tid = allowed || (lastRef? lastRef.tid : null); if(tid){ setActiveTrackId(tid); setRoute("runner"); } else { setRoute("tracks"); } }} onSecondary={()=> setRoute("tracks")} />}{route==="tracks" && <Tracks tracks={TRACKS} allowed={allowed || "all"} onEnterTrack={(tid)=>{ setActiveTrackId(tid); setRoute("runner"); }} />}{route==="runner" && activeTrackId && (<TrackRunner track={getTrack(activeTrackId)} onQuit={()=> setRoute("tracks")} onDone={()=> setRoute("home")} markComplete={(tid)=>{} } updateResume={()=>{}} awardXp={()=>{}} />)}{route==="account" && <Account onRedoOnboarding={()=>setRoute("quiz")} />}<div className="max-w-6xl mx-auto px-5 pb-12"><div className="mt-8 text-xs text-muted">Education only. Not financial advice.</div></div></div>; }